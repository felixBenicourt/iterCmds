{
    "id": 1870949078144,
    "scene_width": 64000,
    "scene_height": 64000,
    "nodes": [
        {
            "id": 1871045114800,
            "title": "Python server instances",
            "customTitle": "Python server instances",
            "pos_x": -448.8398437499996,
            "pos_y": -88.50781250000003,
            "inputs": [],
            "outputs": [
                {
                    "id": 1871045375552,
                    "index": 0,
                    "multi_edges": true,
                    "position": 5,
                    "socket_type": 1
                }
            ],
            "content": {
                "widget": [
                    {
                        "type": "instances_server",
                        "key": "instances",
                        "default": [
                            [
                                "maya.exe",
                                29976
                            ]
                        ]
                    }
                ]
            },
            "op_code": 30
        },
        {
            "id": 2207989960512,
            "title": "Merge",
            "customTitle": "Merge",
            "pos_x": -225.25781249999943,
            "pos_y": 11.383789062500654,
            "inputs": [
                {
                    "id": 2207989962912,
                    "index": 0,
                    "multi_edges": false,
                    "position": 2,
                    "socket_type": 2
                },
                {
                    "id": 2207989964832,
                    "index": 1,
                    "multi_edges": false,
                    "position": 2,
                    "socket_type": 2
                }
            ],
            "outputs": [
                {
                    "id": 2207989966464,
                    "index": 0,
                    "multi_edges": true,
                    "position": 5,
                    "socket_type": 2
                }
            ],
            "content": {
                "widget": []
            },
            "op_code": 2
        },
        {
            "id": 1735734896544,
            "title": "Merge",
            "customTitle": "Merge",
            "pos_x": -449.1735839843746,
            "pos_y": 113.11914062499957,
            "inputs": [
                {
                    "id": 1735734890688,
                    "index": 0,
                    "multi_edges": false,
                    "position": 2,
                    "socket_type": 2
                },
                {
                    "id": 1735734896064,
                    "index": 1,
                    "multi_edges": false,
                    "position": 2,
                    "socket_type": 2
                }
            ],
            "outputs": [
                {
                    "id": 1735734889392,
                    "index": 0,
                    "multi_edges": true,
                    "position": 5,
                    "socket_type": 2
                }
            ],
            "content": {
                "widget": []
            },
            "op_code": 2
        },
        {
            "id": 1550370174384,
            "title": "List",
            "customTitle": "List jnt head",
            "pos_x": -1375.3337402343743,
            "pos_y": -383.2011718749996,
            "inputs": [],
            "outputs": [
                {
                    "id": 1550370176208,
                    "index": 0,
                    "multi_edges": true,
                    "position": 5,
                    "socket_type": 2
                }
            ],
            "content": {
                "widget": [
                    {
                        "type": "text_field",
                        "label": "Attribute Name:",
                        "default": "mouth joints",
                        "key": "AttributeName"
                    },
                    {
                        "type": "text_field",
                        "label": "Separator:",
                        "default": ",",
                        "key": "Separator"
                    },
                    {
                        "type": "text_field",
                        "label": "Liste:",
                        "default": "DHIhead:FACIAL_C_TeethUpper,DHIhead:FACIAL_C_TeethLower",
                        "key": "list"
                    }
                ]
            },
            "op_code": 4
        },
        {
            "id": 2254300006048,
            "title": "Expose values",
            "customTitle": "Expose values",
            "pos_x": -786.3925781249992,
            "pos_y": 312.5695800781252,
            "inputs": [
                {
                    "id": 2254497854752,
                    "index": 0,
                    "multi_edges": false,
                    "position": 2,
                    "socket_type": 2
                }
            ],
            "outputs": [
                {
                    "id": 2254497853648,
                    "index": 0,
                    "multi_edges": true,
                    "position": 5,
                    "socket_type": 2
                }
            ],
            "content": {
                "widget": [
                    {
                        "type": "text_field",
                        "label": "Attribute name:",
                        "default": "data",
                        "key": "AttributeName"
                    }
                ]
            },
            "op_code": 10
        },
        {
            "id": 2254343887008,
            "title": "Merge",
            "customTitle": "Merge",
            "pos_x": -791.2402343749997,
            "pos_y": -111.97265625000028,
            "inputs": [
                {
                    "id": 2254343891232,
                    "index": 0,
                    "multi_edges": false,
                    "position": 2,
                    "socket_type": 2
                },
                {
                    "id": 2254343893248,
                    "index": 1,
                    "multi_edges": false,
                    "position": 2,
                    "socket_type": 2
                }
            ],
            "outputs": [
                {
                    "id": 2254343883888,
                    "index": 0,
                    "multi_edges": true,
                    "position": 5,
                    "socket_type": 2
                }
            ],
            "content": {
                "widget": []
            },
            "op_code": 2
        },
        {
            "id": 2779406236784,
            "title": "Read file",
            "customTitle": "alembic mdl",
            "pos_x": -1096.609375,
            "pos_y": 54.45312499999994,
            "inputs": [],
            "outputs": [
                {
                    "id": 2779406237024,
                    "index": 0,
                    "multi_edges": true,
                    "position": 5,
                    "socket_type": 2
                }
            ],
            "content": {
                "widget": [
                    {
                        "type": "text_field",
                        "label": "Attribute name:",
                        "default": "path alembic",
                        "key": "AttributeName"
                    },
                    {
                        "type": "custom_edit_browse",
                        "default": "C:/HOME/proj/template/chr/metahuman/rig/ada/amiral/amiral_mdl.abc",
                        "key": "customEditBrowse"
                    }
                ]
            },
            "op_code": 32
        },
        {
            "id": 1588435475792,
            "title": "Read dictionary",
            "customTitle": "Read dictionary",
            "pos_x": -1090.09375,
            "pos_y": 313.98437499999994,
            "inputs": [],
            "outputs": [
                {
                    "id": 1588435698880,
                    "index": 0,
                    "multi_edges": true,
                    "position": 5,
                    "socket_type": 2
                }
            ],
            "content": {
                "widget": [
                    {
                        "type": "custom_edit_browse",
                        "default": "C:/pipeline/PROD/iterCmds/1.0.1/iterCmds/rig_data.json",
                        "key": "customEditBrowse"
                    },
                    {
                        "type": "big_push_button",
                        "key": "load_dict_content",
                        "label": "load dictionary content.",
                        "default": true
                    }
                ]
            },
            "op_code": 9
        },
        {
            "id": 1767375012816,
            "title": "Run nodes",
            "customTitle": "swap rig mdl",
            "pos_x": 264.80859374999983,
            "pos_y": 13.84375,
            "inputs": [
                {
                    "id": 1767375013056,
                    "index": 0,
                    "multi_edges": false,
                    "position": 2,
                    "socket_type": 5
                }
            ],
            "outputs": [],
            "content": {
                "widget": [
                    {
                        "type": "big_push_button",
                        "key": "run_button",
                        "label": "Run connected node tree.",
                        "default": true
                    }
                ]
            },
            "op_code": 3
        },
        {
            "id": 1900989459152,
            "title": "Python server Maya",
            "customTitle": "move jnt",
            "pos_x": -62.75,
            "pos_y": 12.765624999999943,
            "inputs": [
                {
                    "id": 1900990686800,
                    "index": 0,
                    "multi_edges": false,
                    "position": 2,
                    "socket_type": 1
                }
            ],
            "outputs": [
                {
                    "id": 1900990685312,
                    "index": 0,
                    "multi_edges": true,
                    "position": 5,
                    "socket_type": 1
                }
            ],
            "content": {
                "widget": [
                    {
                        "type": "text_editor",
                        "label": "Python Code Editor",
                        "key": "python_code",
                        "default": "import maya.cmds as cmds\nimport maya.api.OpenMaya as om\nfrom collections import OrderedDict\nimport re\nimport logging\nimport os\n\n\n# Logging setup\nlogging.basicConfig(level=logging.INFO, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n\n# Define default values for your variables\nmouth_joints = variables[\"mouth joints\"]\n\n# Alembic plugin setup\ndef load_alembic_plugin():\n    if not cmds.pluginInfo('AbcImport', query=True, loaded=True):\n        try:\n            cmds.loadPlugin('AbcImport')\n            logging.info(\"Alembic plugin loaded successfully.\")\n        except Exception as e:\n            logging.error(\"Failed to load Alembic plugin: {}\".format(e))\n            raise\n\n# Import Alembic file with dynamic path\ndef import_alembic(alembic_path):\n    if os.path.exists(alembic_path):\n        try:\n            cmds.file(alembic_path, i=True, type=\"Alembic\", options=\"v=0\", ignoreVersion=True, ra=True)\n            logging.info(\"Alembic file imported successfully from {}\".format(alembic_path))\n        except Exception as e:\n            logging.error(\"Failed to import Alembic file: {}\".format(e))\n            raise\n    else:\n        logging.error(\"Alembic path does not exist: {}\".format(alembic_path))\n        raise FileNotFoundError(\"Alembic file not found at the specified path.\")\n\n# MetaHumanTransfer class with variables\nclass MetaHumanTransfer(object):\n    def __init__(self, rig_head, new_head, rl_name, joint_names=None, alembic_path=None):\n        self.hierarchyDict = OrderedDict()\n        self.rigHead = rig_head\n        self.newHead = new_head\n        self.rlName = rl_name\n        self.joint_names = joint_names or variables[\"list jnt\"]\n        self.alembic_path = alembic_path\n\n    def initDict(self):\n        self.hierarchyDict = OrderedDict()\n\n    def run(self):\n        self.create_temp_hierarchy(self.rigHead, self.newHead)\n        self.move_rigged_hierarchy()\n        self.offset_rigged_hierarchy()\n\n    def get_rig_mesh_data(self, headNme):\n        if cmds.objExists(headNme):\n            selection_list = om.MSelectionList()\n            selection_list.add(headNme)\n            dag_path = selection_list.getDagPath(0)\n            mfn_mesh1 = om.MFnMesh(dag_path)\n            pp = mfn_mesh1.getPoints()\n            length = len(pp)\n            Q = 0\n            while Q < length:\n                points1 = mfn_mesh1.getPoint(Q, space=om.MSpace.kWorld) \n                Q = Q + 1\n            return length, mfn_mesh1\n        else:\n            logging.error(\"Object {} does not exist.\".format(headNme))\n            raise RuntimeError(\"Object {} does not exist.\".format(headNme))\n\n    def get_new_mesh_data(self, headNme, minDistID):\n        sel2 = cmds.ls(headNme)\n        selection_list = om.MSelectionList()\n        selection_list.add(sel2[0])\n        dag_path = selection_list.getDagPath(0)\n        mfn_mesh2 = om.MFnMesh(dag_path)\n        points2 = mfn_mesh2.getPoint(minDistID, space=om.MSpace.kWorld)\n        M2X, M2Y, M2Z = points2.x, points2.y, points2.z\n        return M2X, M2Z, M2Y\n\n    def get_bone_data(self, bone, length, mfnMsh):\n        selected = cmds.select(bone)\n        b = cmds.xform(selected, q=1, ws=1, t=1)\n        bx, by, bz = b[0], b[1], b[2]\n        BonePoint = om.MPoint(b)\n        R = 0\n        distList = []\n        while R < length:\n            distance = BonePoint.distanceTo(mfnMsh.getPoint(R, space=om.MSpace.kWorld)) \n            distList.append(distance)\n            R = R + 1\n        minDist = min(distList)\n        minDistID = distList.index(min(distList))\n        pointMin = mfnMsh.getPoint(minDistID, space=om.MSpace.kWorld)    \n        M1X, M1Y, M1Z = pointMin.x, pointMin.y, pointMin.z\n        return bx, by, bz, M1X, M1Z, M1Y, minDistID\n\n    def get_vertex_offset(self, M2X, M2Z, M2Y, M1X, M1Z, M1Y, bx, by, bz):\n        offsetX = M2X - (M1X - bx)\n        offsetY = M2Y - (M1Y - by)\n        offsetZ = M2Z - (M1Z - bz)\n        return offsetX, offsetY, offsetZ\n\n    def get_transform_offset(self, source, target, trs, axis):\n        srcVal = cmds.getAttr(source + '.' + trs + axis.upper())\n        tgtVal = cmds.getAttr(target + '.' + trs + axis.upper())\n        offset = srcVal - tgtVal\n        return offset\n\n    def set_bone_data(self, bone, offsetX, offsetY, offsetZ):\n        selected = cmds.select(bone)\n        cmds.move(offsetX, offsetY, offsetZ, absolute=True, ws=True, pcp=True)\n\n    def getHierarchyPM(self, source):\n        children = cmds.listRelatives(source, children=True, fullPath=True) or []\n        for child in children:\n            self.hierarchyDict[child] = source\n            self.getHierarchyPM(child)\n        return self.hierarchyDict\n\n    def create_temp_hierarchy(self, rigHead, newHead):\n        if cmds.objExists(variables['root joint']):\n            cmds.delete(variables['root joint'])\n        cmds.duplicate(variables['source namespace']+\":\"+variables['root joint'])\n        allHier = cmds.listRelatives(variables['root joint'], allDescendents=True, fullPath=True)\n        for i in allHier:\n            if cmds.objectType(i) != 'joint':\n                cmds.delete(i)\n        bneLst = cmds.listRelatives('spine_05', allDescendents=True, type='joint')\n        bneLst.insert(0, 'spine_05')\n        for num, bone in enumerate(bneLst):\n            length, mfn_mesh1 = self.get_rig_mesh_data(rigHead)\n            bx, by, bz, M1X, M1Z, M1Y, minDistID = self.get_bone_data(bone, length, mfn_mesh1)\n            M2X, M2Z, M2Y = self.get_new_mesh_data(newHead, minDistID)\n            offsetX, offsetY, offsetZ = self.get_vertex_offset(M2X, M2Z, M2Y, M1X, M1Z, M1Y, bx, by, bz)\n            self.set_bone_data(bone, offsetX, offsetY, offsetZ)\n\n    def move_rigged_hierarchy(self):\n        for jnt in self.joint_names:\n            nmeSpcJnt = variables['source namespace']+\":\"+jnt\n            xf = cmds.xform(jnt, q=1, ws=1, t=1)\n            cmds.xform(nmeSpcJnt, t=xf, ws=True)\n\n    def offset_rigged_hierarchy(self):\n        jntNum = len(cmds.listAttr('{}.jntTranslationOutputs[*]'.format(variables['rln node']))) - 1\n        rlJntDict = OrderedDict()\n        jto = 0\n        while jto < jntNum:\n            jto_ID = '{}.jntTranslationOutputs[{}]'.format(variables['rln node'], jto)\n            rlJntDict[cmds.connectionInfo(jto_ID, destinationFromSource=1)[0]] = jto_ID\n            jto = jto + 1\n        jntOrderDict = OrderedDict()\n        jntOrderDict = self.getHierarchyPM(variables['root joint'])\n        for k, v in jntOrderDict.items():\n            newJnt = k\n            rigJnt = variables['source namespace']+\":\"+k.split('|')[-1]\n            for trs in ['translate']:\n                for axis in 'XYZ':\n                    if rlJntDict.get(rigJnt + '.' + trs + axis):\n                        difVal = self.get_transform_offset(newJnt, rigJnt, trs, axis)\n                        adlName = 'ADL_' + newJnt.split('|')[-1] + '_' + trs + '_' + axis\n                        adlName1 = adlName.replace(\":\", \"\")\n                        adlName2 = adlName1.replace(\".\", \"_\")\n                        ADL = cmds.createNode('addDoubleLinear', n=adlName2)\n                        cmds.connectAttr(rlJntDict.get(rigJnt + '.' + trs + axis), ADL + '.input1')\n                        cmds.setAttr(ADL + '.input2', difVal)\n                        cmds.connectAttr(ADL + '.output', newJnt + '.' + trs + axis)\n\n# Example usage:\nload_alembic_plugin()\nimport_alembic(variables['path alembic'])\nmeta_human_transfer = MetaHumanTransfer(\n    rig_head= variables['ada head'],#\"DHIhead:rig_head_mesh\",\n    new_head= variables['new head'],#\"DHIhead:new_head_mesh\",\n    rl_name=variables['rln node']\n)\nmeta_human_transfer.run()\n"
                    }
                ]
            },
            "op_code": 29
        },
        {
            "id": 1900990689632,
            "title": "Python server Maya",
            "customTitle": "copy skn",
            "pos_x": 91.77734375000006,
            "pos_y": 13.468750000000028,
            "inputs": [
                {
                    "id": 1900990689584,
                    "index": 0,
                    "multi_edges": false,
                    "position": 2,
                    "socket_type": 1
                }
            ],
            "outputs": [
                {
                    "id": 1900990689056,
                    "index": 0,
                    "multi_edges": true,
                    "position": 5,
                    "socket_type": 1
                }
            ],
            "content": {
                "widget": [
                    {
                        "type": "text_editor",
                        "label": "Python Code Editor",
                        "key": "python_code",
                        "default": "\n\nimport maya.cmds as cmds\nimport maya.mel as mel\n\n\nmouth_joints = variables[\"mouth joints\"]\n\n\ndef copy_skin_weights_by_uv(source_mesh, target_mesh):\n    cmds.select(source_mesh)\n    cmds.select(target_mesh, add=True)\n    mel.eval('copySkinWeights  -noMirror -surfaceAssociation closestPoint -uvSpace map1 map1 -influenceAssociation closestJoint -influenceAssociation closestJoint -influenceAssociation closestJoint;')\n    cmds.warning('Skin weights copied from {} to {} based on UV mapping.'.format(source_mesh, target_mesh))\n\ndef skinning_base(target_mesh, jointName, toSelectedBones=False):\n    cmds.select(clear=True, ne=True)\n    cmds.select(jointName)\n    cmds.select(target_mesh, add=True)\n\n    cmds.skinCluster(\n        toSelectedBones=toSelectedBones,\n        bindMethod=0,\n        skinMethod=0,\n        normalizeWeights=1,\n        weightDistribution=2,\n        maximumInfluences=8\n    )\n\ndef copy_transform_if_no_connection(source_joint, target_joint):\n    attributes = ['translateX', 'translateY', 'translateZ', 'rotateX', 'rotateY', 'rotateZ']\n\n    for attr in attributes:\n        target_attr = '{}.{}'.format(target_joint, attr)\n        connections = cmds.listConnections(target_attr, source=True, destination=False)\n\n        if not connections:\n            value = cmds.getAttr('{}.{}'.format(source_joint, attr))\n            cmds.setAttr(target_attr, value)\n\n\ndef make_offset_range(source_joint, target_joint):\n    attributes = ['translateX', 'translateY', 'translateZ']\n    \n    for attr in attributes:\n        target_attr = '{}.{}'.format(target_joint, attr)\n        if variables['source namespace']+\":\"+variables['source namespace']+\":\" in target_attr:\n            target_attr = target_attr.replace(variables['source namespace']+\":\"+variables['source namespace']+\":\",variables['source namespace']+':')\n        connections = cmds.listConnections(target_attr, source=True, destination=False, plugs=True)\n\n        if connections:\n            for conn in connections:\n                source_value = cmds.getAttr('{}.{}'.format(source_joint, attr))\n                target_value = cmds.getAttr(target_attr)\n                offset_value = source_value - target_value\n                add_node = cmds.createNode('addDoubleLinear', name='{}_{}_offset'.format(target_joint, attr))\n                cmds.setAttr('{}.input2'.format(add_node), offset_value)\n                cmds.disconnectAttr(conn, target_attr)\n                cmds.connectAttr(conn, '{}.input1'.format(add_node))\n                cmds.connectAttr('{}.output'.format(add_node), target_attr)\n                cmds.warning('Applied offset for {} -> {}'.format(target_attr, add_node))\n\n\ndef snap_joints_transform(joint_list, source_namespace):\n    for joints in joint_list:\n        joint_name = joints.split('|')[-1]\n        print(joint_name)\n        source_joint = '{}:{}'.format(source_namespace, joint_name)\n        print(source_joint)\n        copy_transform_if_no_connection(joint_name, source_joint)\n        make_offset_range(joint_name, source_joint)\n\n\njoint_list = cmds.listRelatives('{}:{}'.format(variables['source namespace'],variables['root joint']), allDescendents=True, type='joint', fullPath=True) or []\nprint(joint_list)\njoint_list.insert(0, '{}:{}'.format(variables['source namespace'],variables['root joint']))\n\n\nsnap_joints_transform(joint_list, \"\")\ncmds.select(clear=True)\n\njointName = '{}:{}'.format(variables['source namespace'], variables['root joint'])\n\nskinning_base(variables[\"new head\"], jointName)\n\ncmds.select(clear=True)\ncopy_skin_weights_by_uv('Ada_full_rig_head_lod0_mesh', variables[\"new head\"])\n#cmds.delete('spine_04')\ncmds.select(variables[\"new head\"])\n\n\ncmds.deltaMush(\n    smoothingIterations=50,\n    smoothingStep=0.5\n    )\n\n\nskinning_base(\n    variables['eye right'],\n    '{}:FACIAL_R_Eye'.format(variables['source namespace']),\n    toSelectedBones=True\n)\n\nskinning_base(\n    variables['eye left'],\n    '{}:FACIAL_L_Eye'.format(variables['source namespace']),\n    toSelectedBones=True\n)\n\n\nup_Lower_teeth = set(mouth_joints)\njoints = set(up_Lower_teeth)\nfor joint in joints:\n    descendants = cmds.listRelatives(joint, allDescendents=True, type='joint')\n    if descendants:\n        up_Lower_teeth.update(descendants)\n\nmouth_joints_list = list(up_Lower_teeth)\n\nskinning_base(\n    variables['mouth mesh'],\n    mouth_joints_list,\n    toSelectedBones=True\n)\n\ncopy_skin_weights_by_uv(variables['mouth mesh ada'], variables['mouth mesh'])\n\ntry:\n    cmds.setAttr('Ada_full_rig_head_grp|Ada_full_rig_geometry_grp.visibility', 0)\nexcept:\n    pass\n\ncmds.select(clear=True)\n\n\n"
                    }
                ]
            },
            "op_code": 29
        },
        {
            "id": 2512869242480,
            "title": "List",
            "customTitle": "List jnt",
            "pos_x": -1618.3593749999995,
            "pos_y": -38.281250000000114,
            "inputs": [],
            "outputs": [
                {
                    "id": 2512869241328,
                    "index": 0,
                    "multi_edges": true,
                    "position": 5,
                    "socket_type": 2
                }
            ],
            "content": {
                "widget": [
                    {
                        "type": "text_field",
                        "label": "Attribute Name:",
                        "default": "list jnt",
                        "key": "AttributeName"
                    },
                    {
                        "type": "text_field",
                        "label": "Separator:",
                        "default": ", ",
                        "key": "Separator"
                    },
                    {
                        "type": "text_field",
                        "label": "Liste:",
                        "default": "neck_01, FACIAL_C_Neck1Root, neck_02, FACIAL_C_Neck2Root, head, FACIAL_C_FacialRoot, FACIAL_L_Eye, FACIAL_R_Eye",
                        "key": "list"
                    }
                ]
            },
            "op_code": 4
        },
        {
            "id": 2512869242432,
            "title": "Merge",
            "customTitle": "Merge",
            "pos_x": -1099.9999999999993,
            "pos_y": -271.875,
            "inputs": [
                {
                    "id": 2512869241472,
                    "index": 0,
                    "multi_edges": false,
                    "position": 2,
                    "socket_type": 2
                },
                {
                    "id": 2512869240416,
                    "index": 1,
                    "multi_edges": false,
                    "position": 2,
                    "socket_type": 2
                }
            ],
            "outputs": [
                {
                    "id": 2512869243776,
                    "index": 0,
                    "multi_edges": true,
                    "position": 5,
                    "socket_type": 2
                }
            ],
            "content": {
                "widget": []
            },
            "op_code": 2
        },
        {
            "id": 1498496759264,
            "title": "List",
            "customTitle": "List jnt empty",
            "pos_x": -1624.0624999999993,
            "pos_y": -230.6874999999999,
            "inputs": [],
            "outputs": [
                {
                    "id": 1498596583184,
                    "index": 0,
                    "multi_edges": true,
                    "position": 5,
                    "socket_type": 2
                }
            ],
            "content": {
                "widget": [
                    {
                        "type": "text_field",
                        "label": "Attribute Name:",
                        "default": "list jnt",
                        "key": "AttributeName"
                    },
                    {
                        "type": "text_field",
                        "label": "Separator:",
                        "default": ",",
                        "key": "Separator"
                    },
                    {
                        "type": "text_field",
                        "label": "Liste:",
                        "default": "",
                        "key": "list"
                    }
                ]
            },
            "op_code": 4
        },
        {
            "id": 2938215952928,
            "title": "Switch",
            "customTitle": "Switch",
            "pos_x": -1376.1875000000002,
            "pos_y": -139.625,
            "inputs": [
                {
                    "id": 2938215953552,
                    "index": 0,
                    "multi_edges": false,
                    "position": 2,
                    "socket_type": 2
                },
                {
                    "id": 2938215951392,
                    "index": 1,
                    "multi_edges": false,
                    "position": 2,
                    "socket_type": 2
                }
            ],
            "outputs": [
                {
                    "id": 2938215955520,
                    "index": 0,
                    "multi_edges": true,
                    "position": 5,
                    "socket_type": 2
                }
            ],
            "content": {
                "widget": [
                    {
                        "type": "radio_button",
                        "label": "Top input",
                        "default": true,
                        "key": "TopInput"
                    },
                    {
                        "type": "radio_button",
                        "label": "Bottom input",
                        "default": false,
                        "key": "BottomInput"
                    }
                ]
            },
            "op_code": 16
        }
    ],
    "edges": [
        {
            "id": 2254497851968,
            "edge_type": 2,
            "start": 2254497853648,
            "end": 1735734896064
        },
        {
            "id": 2254497853456,
            "edge_type": 2,
            "start": 1735734889392,
            "end": 2207989964832
        },
        {
            "id": 2254343888976,
            "edge_type": 2,
            "start": 2254343883888,
            "end": 1735734890688
        },
        {
            "id": 1496309839424,
            "edge_type": 2,
            "start": 1871045375552,
            "end": 2207989962912
        },
        {
            "id": 2779406236352,
            "edge_type": 2,
            "start": 2779406237024,
            "end": 2254343893248
        },
        {
            "id": 1588435475984,
            "edge_type": 2,
            "start": 1588435698880,
            "end": 2254497854752
        },
        {
            "id": 1900990685552,
            "edge_type": 2,
            "start": 2207989966464,
            "end": 1900990686800
        },
        {
            "id": 2512868447456,
            "edge_type": 2,
            "start": 1550370176208,
            "end": 2512869241472
        },
        {
            "id": 2512785897744,
            "edge_type": 2,
            "start": 2512869243776,
            "end": 2254343891232
        },
        {
            "id": 2161286642080,
            "edge_type": 2,
            "start": 1900990689056,
            "end": 1767375013056
        },
        {
            "id": 2161369675664,
            "edge_type": 2,
            "start": 1900990685312,
            "end": 1900990689584
        },
        {
            "id": 2938215954464,
            "edge_type": 2,
            "start": 1498596583184,
            "end": 2938215953552
        },
        {
            "id": 2938215952448,
            "edge_type": 2,
            "start": 2938215955520,
            "end": 2512869240416
        },
        {
            "id": 2562193495936,
            "edge_type": 2,
            "start": 2512869241328,
            "end": 2938215951392
        }
    ]
}